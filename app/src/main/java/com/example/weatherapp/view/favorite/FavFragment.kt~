package com.example.weatherapp.view.favorite

import android.app.AlertDialog
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.Navigation.findNavController
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
import com.example.weatherapp.R
import com.example.weatherapp.databinding.FragmentFavBinding
import com.example.weatherapp.model.FavWeather
import com.example.weatherapp.model.MapArgs
import com.example.weatherapp.model.Repo
import com.example.weatherapp.model.local.LocalData
import com.example.weatherapp.model.local.SharedPreferences
import com.example.weatherapp.model.remote.RemoteData
import com.example.weatherapp.viewModel.FavFactory
import com.example.weatherapp.viewModel.FavViewModel
import com.example.weatherapp.viewModel.MainActivityViewModel


class FavFragment : Fragment() {

    lateinit var binding:FragmentFavBinding
    lateinit var factory: FavFactory
    lateinit var favViewModel: FavViewModel
//    lateinit var mainViewModel: MainActivityViewModel

    lateinit var myAdapter: FavAdapter

   // private lateinit var swipeRefreshLayout: SwipeRefreshLayout

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {


        factory= FavFactory(Repo.getInstance(RemoteData(), LocalData(requireContext()),
            SharedPreferences(requireContext())
        ))
        favViewModel=ViewModelProvider(this,factory).get(FavViewModel::class.java)

//        mainViewModel= ViewModelProvider(requireActivity()).get(MainActivityViewModel::class.java)

       //  swipeRefreshLayout=requireActivity().findViewById<SwipeRefreshLayout>(R.id.swipeRefreshLayout)

        binding=FragmentFavBinding.inflate(inflater,container,false)
        return binding.root
    }


    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

       // swipeRefreshLayout.isEnabled=false

        myAdapter= FavAdapter({showConfirmationDialog(it)},{

          val action =  FavFragmentDirections.actionFavFragmentToDetailsFragment2(it)
            findNavController().navigate(action)

        })

        binding.FavRecycleView.layoutManager= LinearLayoutManager(context)
        binding.FavRecycleView.adapter=myAdapter


//        mainViewModel.favlocationLiveData.observe(viewLifecycleOwner, Observer {location ->
//            val (lat, lon) = location
//            favViewModel.fetchDataFromApi(lat, lon)
//            swipeRefreshLayout.isEnabled = true
//
//        })


        binding.fabOpenMap.setOnClickListener {

          val actionFrag=  FavFragmentDirections.actionFavFragmentToMapFragment(MapArgs.FavFragment_Source)
            findNavController().navigate(actionFrag)

        }

        favViewModel.favWeather.observe(viewLifecycleOwner, Observer {
            myAdapter.submitList(it)
        })
    }


    override fun onDestroyView() {
        super.onDestroyView()
        Log.d("TAG", "onDestroyView: ")
      //  swipeRefreshLayout.isEnabled = true
    }

    private fun showConfirmationDialog(favWeather: FavWeather) {
        AlertDialog.Builder(context)
            .setTitle("Delete")
            .setMessage("Are you sure you want to delete?")
            .setPositiveButton("OK") { _, _ ->  favViewModel.delet(favWeather) }
            .setNegativeButton("Cancel", null)
            .show()
    }

}
